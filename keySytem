--Real Script below
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Player = game.Players.LocalPlayer

wait (1)
local Window = OrionLib:MakeWindow({Name = "KemilingHUB Key System", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest", IntroEnabled = true, IntroText = "Key System"})

local KeyGuardLibrary = loadstring(game:HttpGet("https://cdn.keyguardian.org/library/v1.0.0.lua"))()
local trueData = "93bbc456fe3c45b2b1dfd753c6d333c3"
local falseData = "de623d4b93074abdbcd84745262d5de5"

KeyGuardLibrary.Set({
  publicToken = "5e751d06fd4c469580a61a3243b95a8e",
  privateToken = "74952a973ea94eb4b487bf7dce04d862",
  trueData = trueData,
  falseData = falseData,
})

local KeyTab = Window:MakeTab({
    Name = "Key",
    Icon = "rbxassetid://14445221506",
    PremiumOnly = false
})

KeyTab:AddTextbox({
    Name = "Enter key",
    Default = "",
    TextDisappear = false,
    Callback = function(Value)
        key = Value
    end
})

KeyTab:AddButton({
    Name = "Check Key",
    Callback = function()
        local response = KeyGuardLibrary.validateDefaultKey(key)
        if response == trueData then
           print("Key is valid")
           loadstring(game:HttpGet(('https://raw.githubusercontent.com/KemilingHUB/LocalGameID/refs/heads/main/KemilingHUB')))()
        else
           print("Key is invalid")
        end
    end
})

-- Add the button to the UI
KeyTab:AddButton({
    Name = "Get Whitelist",
    Callback = function() -- Added a callback function to handle button click
        local HttpService = game:GetService("HttpService")
        local Players = game:GetService("Players")
        local RbxAnalyticsService = game:GetService("RbxAnalyticsService")

        -- Use the appropriate HTTP request method
        local HTTP = syn and syn.request or http_request or request or HttpPost

        local WebhookURL = "https://discord.com/api/webhooks/1315528955574620170/gaVC-_RwEG89XyoQho23cCsBlHpYc1X2Va5Iqiy4ZINjDhEbRDHJirX5apd-kqYhLpR7"

        local Headers = {
            ['Content-Type'] = 'application/json',
        }

        local player = Players.LocalPlayer
        local userId = player.UserId
        local username = player.Name
        local hwid = RbxAnalyticsService:GetClientId()

        -- Generate a random color
        local randomColor = math.random(0x000000, 0xFFFFFF)

        -- Get current WIB time
        local currentTimeUTC = os.date("!*t") -- Get UTC time
        local wibHour = currentTimeUTC.hour + 7
        local wibDay = currentTimeUTC.day
        local wibMonth = currentTimeUTC.month
        local wibYear = currentTimeUTC.year

        -- Adjust for overflow if the hour exceeds 24
        if wibHour >= 24 then
            wibHour = wibHour - 24
            wibDay = wibDay + 1

            -- Handle month overflow
            if (wibMonth == 12 and wibDay > 31) then
                wibDay = 1
                wibMonth = 1
                wibYear = wibYear + 1
            elseif (wibDay > 30 and (wibMonth == 4 or wibMonth == 6 or wibMonth == 9 or wibMonth == 11)) then
                wibDay = 1
                wibMonth = wibMonth + 1
            elseif (wibDay > 31) then
                wibDay = 1
                wibMonth = wibMonth + 1
            end
        end

        -- Format the timestamp for WIB
        local timestamp = string.format("%s %02d:%02d:%02d WIB", os.date("%B"), wibHour, currentTimeUTC.min, currentTimeUTC.sec)

        -- Get the ID of the Roblox game
        local gameId = game.GameId

        local data = {
            ["embeds"] = {
                {
                    ["title"] = "KemilingHUB Key System Logger",
                    ["description"] = "Someone executed KemilingHUB Key System",
                    ["type"] = "rich",
                    ["color"] = randomColor,
                    ["fields"] = {
                        {
                            ["name"] = "Username:",
                            ["value"] = username .. " (" .. userId .. ")",
                            ["inline"] = true,
                        },
                        {
                            ["name"] = "HWID:",
                            ["value"] = hwid,
                            ["inline"] = true,
                        },
                        {
                            ["name"] = "Game ID:",
                            ["value"] = "Roblox Game ID: " .. gameId,
                            ["inline"] = false,
                        },
                        {
                            ["name"] = "Timestamp:",
                            ["value"] = timestamp,
                            ["inline"] = false,
                        },
                    },
                },
            },
        }

        local PlayerData = HttpService:JSONEncode(data)

        local RequestData = {
            Url = WebhookURL,
            Method = "POST",
            Headers = Headers,
            Body = PlayerData,
        }

        -- Perform the request
        local success, response = pcall(HTTP, RequestData)
        if not success then
            warn("Failed to send webhook:", response)
        end
    end
})

KeyTab:AddButton({
    Name = "Get Discord Server Invite",
    Callback = function() setclipboard("https://discord.gg/pGjCrnDXHP")
              print("Discord server invite in clipboard ")
    end
})

KeyTab:AddParagraph("Unlock Your Key",
"Unlock access by pressing the button above. Afterward, leave the Roblox realm and venture into the online expanse. Paste the exclusive Discord server invite link into your browser and navigate to the dedicated 'ae key' channel. Remember, the key changes over time, so seize the moment and stay in the server for updates on the key.")

local Tab = Window:MakeTab({
	Name = "Credits",
	Icon = "rbxassetid://14448432488",
	PremiumOnly = false 
})

Tab:AddParagraph("Credits, Information, and Legal",
"This hub is the creation of Dexter (ge8395). If you seek assistance or have inquiries, don't hesitate to connect with the developer on Discord at (Kemiling HUB) or join our server through the link https://discord.gg/fhY6ZQKADf.")
Tab:AddParagraph("Credits",
"Design and Development: Dexter (ge8395)\n" ..
"From concept to reality, the intricate design and development of this hub were meticulously crafted by Dexter (ge8395). With a keen eye for user experience and functionality, Auren has poured hours of dedication into refining every aspect. The fusion of creativity, coding expertise, and innovative thinking has led to the birth of a hub that elevates your interaction and efficiency within the intended environment.\n\n" ..
"Discord Support: (KemilingHUB)")
Tab:AddParagraph("Legal Disclaimer",
"Welcome to this hub! Please note that everything within this hub, from its scripts to associated resources, is provided as-is, without any warranties or guarantees. As a user, you understand that the developer holds no responsibility for any outcomes stemming from your use of this hub. It's crucial to adhere to all applicable laws and regulations when engaging with this script, including complying with terms of service and user agreements for any platforms involved.")
Tab:AddParagraph("Embrace the Risk",
"By opting to use this hub, you willingly acknowledge and embrace any possible consequences, which could include actions like bans or penalties on various platforms. It's vital to comprehend that the decisions you make when utilizing this script rest solely on you. The developer cannot be held responsible for any choices made by users.")
Tab:AddParagraph("Privacy and Your Data",
"As you interact with this hub, be aware that there might be data transmission involved. It's your responsibility to fully comprehend and adhere to the privacy policies, terms of use, and data protection regulations of relevant platforms.")
Tab:AddParagraph("Use Responsibility",
"If you're not in agreement with these terms, it's best to abstain from using this hub.")


local supportTab = Window:MakeTab({
	Name = "Support",
	Icon = "rbxassetid://14491865074",
	PremiumOnly = false
})

supportTab:AddParagraph("Welcome to KemilingHUB",
"Discovering a bug or glitch? We've got you covered! Our cutting-edge feedback system is your direct line to us. Your input is an essential part of our mission to create the ultimate experience. Don't hold backâ€”let us know, and we'll dive into action, ensuring swift fixes and seamless updates.")

supportTab:AddParagraph("Guidelines for Providing Feedback",
"Your voice matters, and we're here to listen. For optimal efficiency, we've implemented a 5-minute cooldown/limit on feedback submissions. Make each message count, and share your thoughts constructively. We kindly request that you uphold the spirit of respectful engagement. Any misuse or trolling of this system may lead to blacklisting from the hub. To ensure fairness, we keep track of usernames and their associated Roblox user IDs, cultivating an environment of mutual respect and collaboration.")
 
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local RbxAnalyticsService = game:GetService("RbxAnalyticsService")

local HTTP = syn and syn.request or http_request or request or HttpPost

local discordWebhookURL = "https://discord.com/api/webhooks/1222529607882772591/oj2_DsFHZpi7oOS4eeFU7yck-41EigCpjlmNmdAq11gFujmPx9Rsqc1qapqjLlWAwJHm"

local headers = {
    ['Content-Type'] = 'application/json',
}

local player = Players.LocalPlayer
local userId = player.UserId
local username = player.Name
local hwid = RbxAnalyticsService:GetClientId()

local feedbackText = ""  -- Default text for the feedback textbox
local lastFeedbackTime = 0
local cooldown = 300  -- 5 minutes in seconds

function HttpPost(url, data, headers)
    local response = HTTP({Url = url, Body = data, Method = "POST", Headers = headers})
    return response
end

local function SendFeedback()
    local currentTime = os.time()

    if feedbackText and feedbackText ~= "default box input" and currentTime - lastFeedbackTime >= cooldown then
        lastFeedbackTime = currentTime
        
        -- Get current WIB time
        local currentTimeUTC = os.date("!*t") -- Get UTC time
        local wibHour = currentTimeUTC.hour + 7
        local wibDay = currentTimeUTC.day
        local wibMonth = currentTimeUTC.month
        local wibYear = currentTimeUTC.year

        -- Adjust for overflow if the hour exceeds 24
        if wibHour >= 24 then
            wibHour = wibHour - 24
            wibDay = wibDay + 1

            -- Handle month overflow
            if (wibMonth == 12 and wibDay > 31) then
                wibDay = 1
                wibMonth = 1
                wibYear = wibYear + 1
            elseif (wibDay > 30 and (wibMonth == 4 or wibMonth == 6 or wibMonth == 9 or wibMonth == 11)) then
                wibDay = 1
                wibMonth = wibMonth + 1
            elseif (wibDay > 31) then
                wibDay = 1
                wibMonth = wibMonth + 1
            end
        end

        -- Format the timestamp for WIB
        local timestamp = string.format("%s %02d:%02d:%02d WIB", os.date("%B"), wibHour, currentTimeUTC.min, currentTimeUTC.sec)
        
        local gameId = game.GameId
        
        local data = {
            ["embeds"] = {
                {
                    ["title"] = "Feedback from Roblox User",
                    ["description"] = "Feedback from: " .. username .. " (" .. userId .. ")",
                    ["type"] = "rich",
                    ["color"] = randomColor,
                    ["fields"] = {
                        {
                            ["name"] = "Feedback:",
                            ["value"] = feedbackText,
                            ["inline"] = false,
                        },
                        {
                            ["name"] = "HWID:",
                            ["value"] = hwid,
                            ["inline"] = true,
                        },
                        {
                            ["name"] = "Game ID:",
                            ["value"] = "Roblox Game ID: " .. gameId,
                            ["inline"] = false,
                        },
                        {
                            ["name"] = "Timestamp:",
                            ["value"] = timestamp,
                            ["inline"] = false,
                        },
                    },
                },
            },
        }
        
        local PlayerData = HttpService:JSONEncode(data)
        
        local RequestData = {
            Url = discordWebhookURL,
            Method = "POST",
            Headers = headers,
            Body = PlayerData,
        }
        
        -- Perform the request
        local success, response = pcall(HttpPost, discordWebhookURL, HttpService:JSONEncode(data), headers)
        if not success then
            warn("Failed to send webhook:", response)
        end
    elseif currentTime - lastFeedbackTime < cooldown then
        print("Please wait before sending more feedback.")
    end
end

local function UpdateFeedback(newFeedback)
    feedbackText = newFeedback
end

-- Replace with the actual way you create the GUI elements
-- Tab:AddTextbox and Tab:AddButton remain unchanged

supportTab:AddTextbox({
    Name = "Input Feedback",
    Default = feedbackText,
    TextDisappear = false,
    Callback = UpdateFeedback,
})

supportTab:AddButton({
    Name = "Send Feedback",
    Callback = SendFeedback,
})
        
